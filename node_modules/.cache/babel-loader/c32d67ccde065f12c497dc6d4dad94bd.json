{"ast":null,"code":"import * as React from 'react';\nimport KeyCode from \"rc-util/es/KeyCode\";\nvar ESC = KeyCode.ESC,\n    TAB = KeyCode.TAB;\nexport default function useAccessibility(_ref) {\n  var visible = _ref.visible,\n      setTriggerVisible = _ref.setTriggerVisible,\n      triggerRef = _ref.triggerRef,\n      menuRef = _ref.menuRef,\n      menuClassName = _ref.menuClassName,\n      onVisibleChange = _ref.onVisibleChange;\n\n  var handleCloseMenuAndReturnFocus = function handleCloseMenuAndReturnFocus() {\n    if (visible && triggerRef.current) {\n      if (triggerRef.current.triggerRef.current) {\n        triggerRef.current.triggerRef.current.focus();\n      }\n\n      setTriggerVisible(false);\n\n      if (typeof onVisibleChange === 'function') {\n        onVisibleChange(false);\n      }\n    }\n  };\n\n  var handleKeyDown = function handleKeyDown(event) {\n    switch (event.keyCode) {\n      case ESC:\n        handleCloseMenuAndReturnFocus();\n        break;\n\n      case TAB:\n        handleCloseMenuAndReturnFocus();\n        break;\n    }\n  };\n\n  var focusOpenedMenu = function focusOpenedMenu() {\n    if (menuRef.current) {\n      var menuList = menuRef.current.getElementsByClassName(menuClassName)[0];\n\n      if (menuList) {\n        menuList['focus'](); // eslint-disable-line @typescript-eslint/dot-notation\n      }\n    }\n  };\n\n  React.useEffect(function () {\n    if (visible) {\n      setTimeout(function () {\n        focusOpenedMenu();\n        window.addEventListener('keydown', handleKeyDown);\n      }, 100);\n      return function () {\n        window.removeEventListener('keydown', handleKeyDown);\n      };\n    }\n\n    return function () {\n      return null;\n    };\n  }, [visible]); // eslint-disable-line react-hooks/exhaustive-deps\n\n  var returnFocus = function returnFocus() {\n    if (visible && triggerRef.current) {\n      if (triggerRef.current.triggerRef.current) {\n        setTimeout(function () {\n          triggerRef.current.triggerRef.current.focus();\n        }, 100);\n      }\n    }\n  };\n\n  return {\n    returnFocus: returnFocus\n  };\n}","map":{"version":3,"sources":["C:/Users/Hp/Desktop/10fast-food/node_modules/rc-dropdown/es/hooks/useAccessibility.js"],"names":["React","KeyCode","ESC","TAB","useAccessibility","_ref","visible","setTriggerVisible","triggerRef","menuRef","menuClassName","onVisibleChange","handleCloseMenuAndReturnFocus","current","focus","handleKeyDown","event","keyCode","focusOpenedMenu","menuList","getElementsByClassName","useEffect","setTimeout","window","addEventListener","removeEventListener","returnFocus"],"mappings":"AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,OAAOC,OAAP,MAAoB,oBAApB;AACA,IAAIC,GAAG,GAAGD,OAAO,CAACC,GAAlB;AAAA,IACIC,GAAG,GAAGF,OAAO,CAACE,GADlB;AAEA,eAAe,SAASC,gBAAT,CAA0BC,IAA1B,EAAgC;AAC7C,MAAIC,OAAO,GAAGD,IAAI,CAACC,OAAnB;AAAA,MACIC,iBAAiB,GAAGF,IAAI,CAACE,iBAD7B;AAAA,MAEIC,UAAU,GAAGH,IAAI,CAACG,UAFtB;AAAA,MAGIC,OAAO,GAAGJ,IAAI,CAACI,OAHnB;AAAA,MAIIC,aAAa,GAAGL,IAAI,CAACK,aAJzB;AAAA,MAKIC,eAAe,GAAGN,IAAI,CAACM,eAL3B;;AAOA,MAAIC,6BAA6B,GAAG,SAASA,6BAAT,GAAyC;AAC3E,QAAIN,OAAO,IAAIE,UAAU,CAACK,OAA1B,EAAmC;AACjC,UAAIL,UAAU,CAACK,OAAX,CAAmBL,UAAnB,CAA8BK,OAAlC,EAA2C;AACzCL,QAAAA,UAAU,CAACK,OAAX,CAAmBL,UAAnB,CAA8BK,OAA9B,CAAsCC,KAAtC;AACD;;AAEDP,MAAAA,iBAAiB,CAAC,KAAD,CAAjB;;AAEA,UAAI,OAAOI,eAAP,KAA2B,UAA/B,EAA2C;AACzCA,QAAAA,eAAe,CAAC,KAAD,CAAf;AACD;AACF;AACF,GAZD;;AAcA,MAAII,aAAa,GAAG,SAASA,aAAT,CAAuBC,KAAvB,EAA8B;AAChD,YAAQA,KAAK,CAACC,OAAd;AACE,WAAKf,GAAL;AACEU,QAAAA,6BAA6B;AAC7B;;AAEF,WAAKT,GAAL;AACES,QAAAA,6BAA6B;AAC7B;AAPJ;AASD,GAVD;;AAYA,MAAIM,eAAe,GAAG,SAASA,eAAT,GAA2B;AAC/C,QAAIT,OAAO,CAACI,OAAZ,EAAqB;AACnB,UAAIM,QAAQ,GAAGV,OAAO,CAACI,OAAR,CAAgBO,sBAAhB,CAAuCV,aAAvC,EAAsD,CAAtD,CAAf;;AAEA,UAAIS,QAAJ,EAAc;AACZA,QAAAA,QAAQ,CAAC,OAAD,CAAR,GADY,CACS;AACtB;AACF;AACF,GARD;;AAUAnB,EAAAA,KAAK,CAACqB,SAAN,CAAgB,YAAY;AAC1B,QAAIf,OAAJ,EAAa;AACXgB,MAAAA,UAAU,CAAC,YAAY;AACrBJ,QAAAA,eAAe;AACfK,QAAAA,MAAM,CAACC,gBAAP,CAAwB,SAAxB,EAAmCT,aAAnC;AACD,OAHS,EAGP,GAHO,CAAV;AAIA,aAAO,YAAY;AACjBQ,QAAAA,MAAM,CAACE,mBAAP,CAA2B,SAA3B,EAAsCV,aAAtC;AACD,OAFD;AAGD;;AAED,WAAO,YAAY;AACjB,aAAO,IAAP;AACD,KAFD;AAGD,GAdD,EAcG,CAACT,OAAD,CAdH,EA5C6C,CA0D9B;;AAEf,MAAIoB,WAAW,GAAG,SAASA,WAAT,GAAuB;AACvC,QAAIpB,OAAO,IAAIE,UAAU,CAACK,OAA1B,EAAmC;AACjC,UAAIL,UAAU,CAACK,OAAX,CAAmBL,UAAnB,CAA8BK,OAAlC,EAA2C;AACzCS,QAAAA,UAAU,CAAC,YAAY;AACrBd,UAAAA,UAAU,CAACK,OAAX,CAAmBL,UAAnB,CAA8BK,OAA9B,CAAsCC,KAAtC;AACD,SAFS,EAEP,GAFO,CAAV;AAGD;AACF;AACF,GARD;;AAUA,SAAO;AACLY,IAAAA,WAAW,EAAEA;AADR,GAAP;AAGD","sourcesContent":["import * as React from 'react';\nimport KeyCode from \"rc-util/es/KeyCode\";\nvar ESC = KeyCode.ESC,\n    TAB = KeyCode.TAB;\nexport default function useAccessibility(_ref) {\n  var visible = _ref.visible,\n      setTriggerVisible = _ref.setTriggerVisible,\n      triggerRef = _ref.triggerRef,\n      menuRef = _ref.menuRef,\n      menuClassName = _ref.menuClassName,\n      onVisibleChange = _ref.onVisibleChange;\n\n  var handleCloseMenuAndReturnFocus = function handleCloseMenuAndReturnFocus() {\n    if (visible && triggerRef.current) {\n      if (triggerRef.current.triggerRef.current) {\n        triggerRef.current.triggerRef.current.focus();\n      }\n\n      setTriggerVisible(false);\n\n      if (typeof onVisibleChange === 'function') {\n        onVisibleChange(false);\n      }\n    }\n  };\n\n  var handleKeyDown = function handleKeyDown(event) {\n    switch (event.keyCode) {\n      case ESC:\n        handleCloseMenuAndReturnFocus();\n        break;\n\n      case TAB:\n        handleCloseMenuAndReturnFocus();\n        break;\n    }\n  };\n\n  var focusOpenedMenu = function focusOpenedMenu() {\n    if (menuRef.current) {\n      var menuList = menuRef.current.getElementsByClassName(menuClassName)[0];\n\n      if (menuList) {\n        menuList['focus'](); // eslint-disable-line @typescript-eslint/dot-notation\n      }\n    }\n  };\n\n  React.useEffect(function () {\n    if (visible) {\n      setTimeout(function () {\n        focusOpenedMenu();\n        window.addEventListener('keydown', handleKeyDown);\n      }, 100);\n      return function () {\n        window.removeEventListener('keydown', handleKeyDown);\n      };\n    }\n\n    return function () {\n      return null;\n    };\n  }, [visible]); // eslint-disable-line react-hooks/exhaustive-deps\n\n  var returnFocus = function returnFocus() {\n    if (visible && triggerRef.current) {\n      if (triggerRef.current.triggerRef.current) {\n        setTimeout(function () {\n          triggerRef.current.triggerRef.current.focus();\n        }, 100);\n      }\n    }\n  };\n\n  return {\n    returnFocus: returnFocus\n  };\n}"]},"metadata":{},"sourceType":"module"}